1.将服务提供者注册到注册中心(暴露服务)
    1.1导入dubbo依赖，引入操作zookeeper的客户端(dubbo2.5版本之前用的是zkclient，2.5版本之后用的是curator-framework)
2.让服务消费者去注册中心订阅服务提供者的地址

BIO阻塞io：由Socket创建一个连接之后开启一个线程进行read和write操作。其中Socket里面的accept操作会阻塞，如果有很多连接进行的话那么意味着有很
多的线程被阻塞，那么服务器就不能同时处理很多大量的请求。
NIO(非阻塞io)：由channel(通道，内部有buffer)进行传输，一个seletor(选择器)能够register很多channel通道，seletor能够监听多个channel，当发现某一
个channel连接好了，发现某一个channel的connection成功了，监听channel的read和write事件，发现这两个事件就绪之后，就开始accept接受数据

Netty
Netty是一个异步事件驱动的网络应用程序框架， 用于快速开发可维护的高性能协议服务器和客户端。它极大地简化并简化了TCP和UDP套接字服务器等网络编程。

Netty是基于NIO的多路复用模型来做的
Netty会监听某端口，所有给该端口发送的数据netty能接收到。
1.会初始化netty的channel
2.并将其register到seletor(选择器.多路复用器)里面,seletor会监听accpet事件，当事件就绪后会处理通道里面的信息了
3.会与客户端建立起连接，创建一个NIOSocketChannel，将channel注册到新的seletor里面，seletor会监听read和write事件，数据读和写准备就绪之后
会生成(任务队列)来进行读和写事件

操作其中里面会有两个线程组(boss和work):boss线程组会监听端口(dubbo 20880)的准备就绪事件，事件就绪后会把任务丢给work线程组去做

Dubbo原理：
1标签解析：dubbo的标签被spring解析的时候，基本所有的标签都会有一个总接口(BeanDefinitionParse被继承DubboBeanDefinitionParse)的pasre方法解析
此方法会解析各个标签的信息，会添加一些id，value值会根据每个标签的value值配置beanClass，DubboNameSpaceHandle里面都有每一
个beanClass(例如:protocolConfig.consumerConfig.providerConfig其中较为特别的是service.reference标签对应的是ServiceBean,ReferenceBean)

2服务暴露流程：ServiceBean实现了InitializingBean接口，
(第一步)组件创建完成之后会调用InitializingBean接口的afterpropertiesSet，会将providerConfig.protocolConfig.RegisterConfig等都set给ServiceBean
(第二步)在ioc容器启动完成之后调用onApplicationEvent方法，判断接口只要不是延迟暴露和还没暴露和不是不暴露便执行export(暴露服务)方法
export首先会读取register的地址，获取protocol配置里面的多个协议(dubbo://或http://或webservice://)，而后会利用DubboExporter和registerExporter
的暴露器暴露服务，最后会调用Netty的很多bind方法，会产生一个ProviderConsumerRegTable里面会有服务的url和对应的执行器，当需要提供服务的时候，
首先找到url地址，再根据地址找到对应执行器来提供服务

3服务引用流程：ReferenceBean实现Spring的FactoryBean，会调用里面的init方法，进入到ReferenceConfig的creatProxy方法，调用里面的refprotocol.refer
方法参数(interface,urls.get(0))里面有register的地址，核心是DubboProtocol的refer方法和registerProtocol的refer方法(先得到register的地址，再
得到信息ip 端口之类的)，进而调用doRefer方法里面的directory.subscribe方法来订阅服务提供者来提供的服务，同时会来到DubboProtocol的里面调用refer
方法，通过里面的getClients方法获取客户端放回真正的invoke，invoke里面会有很多需要用的参数(dubbo协议，register地址，还有所需要调用的接口方法等)
再调用ProviderConsumerRegTable.registerConsumer方法把invoker、url、subscribeURL、directory当做参数传递进去，最后返回ReferenceConfig的
createProxy方法会得到一个代理对象，并且里面封装需要的参数，接下来调用对象就好了

4服务调用流程：此时的调用服务的对象UserService其实是个Proxy对象，此时调用方法会进入InvokerInvocationHandler调用Invoker.invoke方法参数里面
会new一个RpcInvocation(method,args)对象，其实是调用MockClusterInvoler.invoke方法，内部的invoke对象是FailOverClusterInvoke(集群容错对象)
集群容错对象会调用list方法，找到可以执行的多个方法(出现多个方法的原因是我们可能会设置不同Version的方法)所以会有多个可执行的方法，然后获取
loadbalance(负载均衡机制)，并且调用其doInvoke方法，继而下一个方法是FailOverClusterInvoke的select方法参数是(loadbalance和多个invoke)，此时
有一个小插曲(我们其实可以再proxy刚开始的设置filter比如cache的，而在loadbalance之后也可以设置filter比如说monitor、count)在loadbalance到真正
的invoke之间有很多filter，在执行完各种Filter之后回来到最终的DubboInvoke(在最终帮我们执行方法的)的方法currentClient.request(inv,timeout).get()
可以看到最终是client调用netty的各种方法完成通信
